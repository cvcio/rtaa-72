// source: proto/cvcio/classification/comments.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

//var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
//goog.object.extend(proto, google_api_annotations_pb);
var proto_cvcio_classification_meta_pb = require('../../../proto/cvcio/classification/meta_pb.js');
goog.object.extend(proto, proto_cvcio_classification_meta_pb);
var proto_cvcio_classification_predictions_pb = require('../../../proto/cvcio/classification/predictions_pb.js');
goog.object.extend(proto, proto_cvcio_classification_predictions_pb);
goog.exportSymbol('proto.classification.Comment', null, global);
goog.exportSymbol('proto.classification.CommentList', null, global);
goog.exportSymbol('proto.classification.ResponseToxic', null, global);
goog.exportSymbol('proto.classification.ResponseToxicList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.classification.Comment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.classification.Comment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.classification.Comment.displayName = 'proto.classification.Comment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.classification.CommentList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.classification.CommentList.repeatedFields_, null);
};
goog.inherits(proto.classification.CommentList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.classification.CommentList.displayName = 'proto.classification.CommentList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.classification.ResponseToxic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.classification.ResponseToxic.repeatedFields_, null);
};
goog.inherits(proto.classification.ResponseToxic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.classification.ResponseToxic.displayName = 'proto.classification.ResponseToxic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.classification.ResponseToxicList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.classification.ResponseToxicList.repeatedFields_, null);
};
goog.inherits(proto.classification.ResponseToxicList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.classification.ResponseToxicList.displayName = 'proto.classification.ResponseToxicList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.classification.Comment.prototype.toObject = function(opt_includeInstance) {
  return proto.classification.Comment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.classification.Comment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.classification.Comment.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    meta: (f = msg.getMeta()) && proto_cvcio_classification_meta_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.classification.Comment}
 */
proto.classification.Comment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.classification.Comment;
  return proto.classification.Comment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.classification.Comment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.classification.Comment}
 */
proto.classification.Comment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = new proto_cvcio_classification_meta_pb.Meta;
      reader.readMessage(value,proto_cvcio_classification_meta_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.classification.Comment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.classification.Comment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.classification.Comment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.classification.Comment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_cvcio_classification_meta_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.classification.Comment.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.classification.Comment} returns this
 */
proto.classification.Comment.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Meta meta = 2;
 * @return {?proto.classification.Meta}
 */
proto.classification.Comment.prototype.getMeta = function() {
  return /** @type{?proto.classification.Meta} */ (
    jspb.Message.getWrapperField(this, proto_cvcio_classification_meta_pb.Meta, 2));
};


/**
 * @param {?proto.classification.Meta|undefined} value
 * @return {!proto.classification.Comment} returns this
*/
proto.classification.Comment.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.classification.Comment} returns this
 */
proto.classification.Comment.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.classification.Comment.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.classification.CommentList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.classification.CommentList.prototype.toObject = function(opt_includeInstance) {
  return proto.classification.CommentList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.classification.CommentList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.classification.CommentList.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.classification.Comment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.classification.CommentList}
 */
proto.classification.CommentList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.classification.CommentList;
  return proto.classification.CommentList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.classification.CommentList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.classification.CommentList}
 */
proto.classification.CommentList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.classification.Comment;
      reader.readMessage(value,proto.classification.Comment.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.classification.CommentList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.classification.CommentList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.classification.CommentList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.classification.CommentList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.classification.Comment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Comment comments = 1;
 * @return {!Array<!proto.classification.Comment>}
 */
proto.classification.CommentList.prototype.getCommentsList = function() {
  return /** @type{!Array<!proto.classification.Comment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.classification.Comment, 1));
};


/**
 * @param {!Array<!proto.classification.Comment>} value
 * @return {!proto.classification.CommentList} returns this
*/
proto.classification.CommentList.prototype.setCommentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.classification.Comment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.classification.Comment}
 */
proto.classification.CommentList.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.classification.Comment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.classification.CommentList} returns this
 */
proto.classification.CommentList.prototype.clearCommentsList = function() {
  return this.setCommentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.classification.ResponseToxic.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.classification.ResponseToxic.prototype.toObject = function(opt_includeInstance) {
  return proto.classification.ResponseToxic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.classification.ResponseToxic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.classification.ResponseToxic.toObject = function(includeInstance, msg) {
  var f, obj = {
    predictionsList: jspb.Message.toObjectList(msg.getPredictionsList(),
    proto_cvcio_classification_predictions_pb.Prediction.toObject, includeInstance),
    meta: (f = msg.getMeta()) && proto_cvcio_classification_meta_pb.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.classification.ResponseToxic}
 */
proto.classification.ResponseToxic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.classification.ResponseToxic;
  return proto.classification.ResponseToxic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.classification.ResponseToxic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.classification.ResponseToxic}
 */
proto.classification.ResponseToxic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_cvcio_classification_predictions_pb.Prediction;
      reader.readMessage(value,proto_cvcio_classification_predictions_pb.Prediction.deserializeBinaryFromReader);
      msg.addPredictions(value);
      break;
    case 2:
      var value = new proto_cvcio_classification_meta_pb.Meta;
      reader.readMessage(value,proto_cvcio_classification_meta_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.classification.ResponseToxic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.classification.ResponseToxic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.classification.ResponseToxic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.classification.ResponseToxic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPredictionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto_cvcio_classification_predictions_pb.Prediction.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_cvcio_classification_meta_pb.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Prediction predictions = 1;
 * @return {!Array<!proto.classification.Prediction>}
 */
proto.classification.ResponseToxic.prototype.getPredictionsList = function() {
  return /** @type{!Array<!proto.classification.Prediction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_cvcio_classification_predictions_pb.Prediction, 1));
};


/**
 * @param {!Array<!proto.classification.Prediction>} value
 * @return {!proto.classification.ResponseToxic} returns this
*/
proto.classification.ResponseToxic.prototype.setPredictionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.classification.Prediction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.classification.Prediction}
 */
proto.classification.ResponseToxic.prototype.addPredictions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.classification.Prediction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.classification.ResponseToxic} returns this
 */
proto.classification.ResponseToxic.prototype.clearPredictionsList = function() {
  return this.setPredictionsList([]);
};


/**
 * optional Meta meta = 2;
 * @return {?proto.classification.Meta}
 */
proto.classification.ResponseToxic.prototype.getMeta = function() {
  return /** @type{?proto.classification.Meta} */ (
    jspb.Message.getWrapperField(this, proto_cvcio_classification_meta_pb.Meta, 2));
};


/**
 * @param {?proto.classification.Meta|undefined} value
 * @return {!proto.classification.ResponseToxic} returns this
*/
proto.classification.ResponseToxic.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.classification.ResponseToxic} returns this
 */
proto.classification.ResponseToxic.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.classification.ResponseToxic.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.classification.ResponseToxicList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.classification.ResponseToxicList.prototype.toObject = function(opt_includeInstance) {
  return proto.classification.ResponseToxicList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.classification.ResponseToxicList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.classification.ResponseToxicList.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.classification.ResponseToxic.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.classification.ResponseToxicList}
 */
proto.classification.ResponseToxicList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.classification.ResponseToxicList;
  return proto.classification.ResponseToxicList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.classification.ResponseToxicList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.classification.ResponseToxicList}
 */
proto.classification.ResponseToxicList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.classification.ResponseToxic;
      reader.readMessage(value,proto.classification.ResponseToxic.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.classification.ResponseToxicList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.classification.ResponseToxicList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.classification.ResponseToxicList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.classification.ResponseToxicList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.classification.ResponseToxic.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResponseToxic comments = 1;
 * @return {!Array<!proto.classification.ResponseToxic>}
 */
proto.classification.ResponseToxicList.prototype.getCommentsList = function() {
  return /** @type{!Array<!proto.classification.ResponseToxic>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.classification.ResponseToxic, 1));
};


/**
 * @param {!Array<!proto.classification.ResponseToxic>} value
 * @return {!proto.classification.ResponseToxicList} returns this
*/
proto.classification.ResponseToxicList.prototype.setCommentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.classification.ResponseToxic=} opt_value
 * @param {number=} opt_index
 * @return {!proto.classification.ResponseToxic}
 */
proto.classification.ResponseToxicList.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.classification.ResponseToxic, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.classification.ResponseToxicList} returns this
 */
proto.classification.ResponseToxicList.prototype.clearCommentsList = function() {
  return this.setCommentsList([]);
};


goog.object.extend(exports, proto.classification);
