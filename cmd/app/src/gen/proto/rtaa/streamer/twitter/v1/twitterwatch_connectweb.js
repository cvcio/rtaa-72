// @generated by protoc-gen-connect-web v0.1.0 with parameter "target=js"
// @generated from file proto/rtaa/streamer/twitter/v1/twitterwatch.proto (package proto.rtaa.streamer.twitter.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {AuthorizeRequest, AuthResponse, ConnectRequest, ConnectResponse, Empty, ObbResponse, RulesRequest, RulesResponse, StreamRequest, StreamResponse, VerifyRequest} from "./twitterwatch_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * TwitterWatchService Microservice
 *
 * @generated from service proto.rtaa.streamer.twitter.v1.TwitterWatchService
 */
export const TwitterWatchService = {
  typeName: "proto.rtaa.streamer.twitter.v1.TwitterWatchService",
  methods: {
    /**
     * Autorize implements twitter's oauth2 authorization
     * read more: https://developer.twitter.com/en/docs/authentication/oauth-2-0
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.Authorize
     */
    authorize: {
      name: "Authorize",
      I: AuthorizeRequest,
      O: AuthResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Obb implements twitter's pin-based oath 1.0a authorization
     * read more: https://developer.twitter.com/en/docs/authentication/oauth-1-0a/pin-based-oauth
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.Obb
     */
    obb: {
      name: "Obb",
      I: Empty,
      O: ObbResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify twitter's authorization
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.Verify
     */
    verify: {
      name: "Verify",
      I: VerifyRequest,
      O: AuthResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Addrules adds a new rule to twitter streaming api
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.AddRules
     */
    addRules: {
      name: "AddRules",
      I: RulesRequest,
      O: RulesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRules returns all rules stored on twitter streaming api
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.GetRules
     */
    getRules: {
      name: "GetRules",
      I: RulesRequest,
      O: RulesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRule by id, specific to user id
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.GetRule
     */
    getRule: {
      name: "GetRule",
      I: RulesRequest,
      O: RulesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteRules deletes all rules
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.DeleteRules
     */
    deleteRules: {
      name: "DeleteRules",
      I: RulesRequest,
      O: RulesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteRule deletes a specific rule
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.DeleteRule
     */
    deleteRule: {
      name: "DeleteRule",
      I: RulesRequest,
      O: RulesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Connect establish a connection with the service
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.Connect
     */
    connect: {
      name: "Connect",
      I: ConnectRequest,
      O: ConnectResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Disconnect establish a connection with the service
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.Disconnect
     */
    disconnect: {
      name: "Disconnect",
      I: ConnectRequest,
      O: ConnectResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Stream data from twitter api
     *
     * @generated from rpc proto.rtaa.streamer.twitter.v1.TwitterWatchService.Stream
     */
    stream: {
      name: "Stream",
      I: StreamRequest,
      O: StreamResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
};

