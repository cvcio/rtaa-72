// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/rtaa/classification/accounts/v1/accounts.proto

package accountsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/cvcio/rtaa-72/internal/proto/rtaa/classification/accounts/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "proto.rtaa.classification.accounts.v1.AccountService"
)

// AccountServiceClient is a client for the proto.rtaa.classification.accounts.v1.AccountService
// service.
type AccountServiceClient interface {
	// ClassifyTwitterAccount classifies a single TwitterAccount
	// returns a ResponseAccount message
	ClassifyTwitterAccount(context.Context, *connect_go.Request[v1.TwitterAccount]) (*connect_go.Response[v1.ResponseAccount], error)
	// ClassifyTwitterAccount classifies a list of TwitterAccount messages (TwitterAccountList)
	// returns a list of ResponseAccount messages (ResponseAccountList)
	ClassifyTwitterAccounts(context.Context, *connect_go.Request[v1.TwitterAccountList]) (*connect_go.Response[v1.ResponseAccountList], error)
}

// NewAccountServiceClient constructs a client for the
// proto.rtaa.classification.accounts.v1.AccountService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountServiceClient{
		classifyTwitterAccount: connect_go.NewClient[v1.TwitterAccount, v1.ResponseAccount](
			httpClient,
			baseURL+"/proto.rtaa.classification.accounts.v1.AccountService/ClassifyTwitterAccount",
			opts...,
		),
		classifyTwitterAccounts: connect_go.NewClient[v1.TwitterAccountList, v1.ResponseAccountList](
			httpClient,
			baseURL+"/proto.rtaa.classification.accounts.v1.AccountService/ClassifyTwitterAccounts",
			opts...,
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	classifyTwitterAccount  *connect_go.Client[v1.TwitterAccount, v1.ResponseAccount]
	classifyTwitterAccounts *connect_go.Client[v1.TwitterAccountList, v1.ResponseAccountList]
}

// ClassifyTwitterAccount calls
// proto.rtaa.classification.accounts.v1.AccountService.ClassifyTwitterAccount.
func (c *accountServiceClient) ClassifyTwitterAccount(ctx context.Context, req *connect_go.Request[v1.TwitterAccount]) (*connect_go.Response[v1.ResponseAccount], error) {
	return c.classifyTwitterAccount.CallUnary(ctx, req)
}

// ClassifyTwitterAccounts calls
// proto.rtaa.classification.accounts.v1.AccountService.ClassifyTwitterAccounts.
func (c *accountServiceClient) ClassifyTwitterAccounts(ctx context.Context, req *connect_go.Request[v1.TwitterAccountList]) (*connect_go.Response[v1.ResponseAccountList], error) {
	return c.classifyTwitterAccounts.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the
// proto.rtaa.classification.accounts.v1.AccountService service.
type AccountServiceHandler interface {
	// ClassifyTwitterAccount classifies a single TwitterAccount
	// returns a ResponseAccount message
	ClassifyTwitterAccount(context.Context, *connect_go.Request[v1.TwitterAccount]) (*connect_go.Response[v1.ResponseAccount], error)
	// ClassifyTwitterAccount classifies a list of TwitterAccount messages (TwitterAccountList)
	// returns a list of ResponseAccount messages (ResponseAccountList)
	ClassifyTwitterAccounts(context.Context, *connect_go.Request[v1.TwitterAccountList]) (*connect_go.Response[v1.ResponseAccountList], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.rtaa.classification.accounts.v1.AccountService/ClassifyTwitterAccount", connect_go.NewUnaryHandler(
		"/proto.rtaa.classification.accounts.v1.AccountService/ClassifyTwitterAccount",
		svc.ClassifyTwitterAccount,
		opts...,
	))
	mux.Handle("/proto.rtaa.classification.accounts.v1.AccountService/ClassifyTwitterAccounts", connect_go.NewUnaryHandler(
		"/proto.rtaa.classification.accounts.v1.AccountService/ClassifyTwitterAccounts",
		svc.ClassifyTwitterAccounts,
		opts...,
	))
	return "/proto.rtaa.classification.accounts.v1.AccountService/", mux
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) ClassifyTwitterAccount(context.Context, *connect_go.Request[v1.TwitterAccount]) (*connect_go.Response[v1.ResponseAccount], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.rtaa.classification.accounts.v1.AccountService.ClassifyTwitterAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) ClassifyTwitterAccounts(context.Context, *connect_go.Request[v1.TwitterAccountList]) (*connect_go.Response[v1.ResponseAccountList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.rtaa.classification.accounts.v1.AccountService.ClassifyTwitterAccounts is not implemented"))
}
