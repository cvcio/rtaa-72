// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/rtaa/classification/comments/v1/comments.proto

package commentsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/cvcio/rtaa-72/internal/proto/rtaa/classification/comments/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CommentServiceName is the fully-qualified name of the CommentService service.
	CommentServiceName = "proto.rtaa.classification.comments.v1.CommentService"
)

// CommentServiceClient is a client for the proto.rtaa.classification.comments.v1.CommentService
// service.
type CommentServiceClient interface {
	ClassifyToxic(context.Context, *connect_go.Request[v1.Comment]) (*connect_go.Response[v1.ResponseToxic], error)
	ClassifyToxicList(context.Context, *connect_go.Request[v1.CommentList]) (*connect_go.Response[v1.ResponseToxicList], error)
}

// NewCommentServiceClient constructs a client for the
// proto.rtaa.classification.comments.v1.CommentService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CommentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &commentServiceClient{
		classifyToxic: connect_go.NewClient[v1.Comment, v1.ResponseToxic](
			httpClient,
			baseURL+"/proto.rtaa.classification.comments.v1.CommentService/ClassifyToxic",
			opts...,
		),
		classifyToxicList: connect_go.NewClient[v1.CommentList, v1.ResponseToxicList](
			httpClient,
			baseURL+"/proto.rtaa.classification.comments.v1.CommentService/ClassifyToxicList",
			opts...,
		),
	}
}

// commentServiceClient implements CommentServiceClient.
type commentServiceClient struct {
	classifyToxic     *connect_go.Client[v1.Comment, v1.ResponseToxic]
	classifyToxicList *connect_go.Client[v1.CommentList, v1.ResponseToxicList]
}

// ClassifyToxic calls proto.rtaa.classification.comments.v1.CommentService.ClassifyToxic.
func (c *commentServiceClient) ClassifyToxic(ctx context.Context, req *connect_go.Request[v1.Comment]) (*connect_go.Response[v1.ResponseToxic], error) {
	return c.classifyToxic.CallUnary(ctx, req)
}

// ClassifyToxicList calls proto.rtaa.classification.comments.v1.CommentService.ClassifyToxicList.
func (c *commentServiceClient) ClassifyToxicList(ctx context.Context, req *connect_go.Request[v1.CommentList]) (*connect_go.Response[v1.ResponseToxicList], error) {
	return c.classifyToxicList.CallUnary(ctx, req)
}

// CommentServiceHandler is an implementation of the
// proto.rtaa.classification.comments.v1.CommentService service.
type CommentServiceHandler interface {
	ClassifyToxic(context.Context, *connect_go.Request[v1.Comment]) (*connect_go.Response[v1.ResponseToxic], error)
	ClassifyToxicList(context.Context, *connect_go.Request[v1.CommentList]) (*connect_go.Response[v1.ResponseToxicList], error)
}

// NewCommentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommentServiceHandler(svc CommentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.rtaa.classification.comments.v1.CommentService/ClassifyToxic", connect_go.NewUnaryHandler(
		"/proto.rtaa.classification.comments.v1.CommentService/ClassifyToxic",
		svc.ClassifyToxic,
		opts...,
	))
	mux.Handle("/proto.rtaa.classification.comments.v1.CommentService/ClassifyToxicList", connect_go.NewUnaryHandler(
		"/proto.rtaa.classification.comments.v1.CommentService/ClassifyToxicList",
		svc.ClassifyToxicList,
		opts...,
	))
	return "/proto.rtaa.classification.comments.v1.CommentService/", mux
}

// UnimplementedCommentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommentServiceHandler struct{}

func (UnimplementedCommentServiceHandler) ClassifyToxic(context.Context, *connect_go.Request[v1.Comment]) (*connect_go.Response[v1.ResponseToxic], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.rtaa.classification.comments.v1.CommentService.ClassifyToxic is not implemented"))
}

func (UnimplementedCommentServiceHandler) ClassifyToxicList(context.Context, *connect_go.Request[v1.CommentList]) (*connect_go.Response[v1.ResponseToxicList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.rtaa.classification.comments.v1.CommentService.ClassifyToxicList is not implemented"))
}
