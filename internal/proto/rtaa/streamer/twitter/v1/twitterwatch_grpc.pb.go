// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package twitterv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwitterWatchServiceClient is the client API for TwitterWatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitterWatchServiceClient interface {
	// Autorize implements twitter's oauth2 authorization
	// read more: https://developer.twitter.com/en/docs/authentication/oauth-2-0
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// Obb implements twitter's pin-based oath 1.0a authorization
	// read more: https://developer.twitter.com/en/docs/authentication/oauth-1-0a/pin-based-oauth
	Obb(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ObbResponse, error)
	// Verify twitter's authorization
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// Addrules adds a new rule to twitter streaming api
	AddRules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error)
	// GetRules returns all rules stored on twitter streaming api
	GetRules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error)
	// GetRule by id, specific to user id
	GetRule(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error)
	// DeleteRules deletes all rules
	DeleteRules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error)
	// DeleteRule deletes a specific rule
	DeleteRule(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error)
	// Connect establish a connection with the service
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnect establish a connection with the service
	Disconnect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Stream data from twitter api
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (TwitterWatchService_StreamClient, error)
}

type twitterWatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitterWatchServiceClient(cc grpc.ClientConnInterface) TwitterWatchServiceClient {
	return &twitterWatchServiceClient{cc}
}

func (c *twitterWatchServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) Obb(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ObbResponse, error) {
	out := new(ObbResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Obb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) AddRules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error) {
	out := new(RulesResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/AddRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) GetRules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error) {
	out := new(RulesResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/GetRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) GetRule(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error) {
	out := new(RulesResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) DeleteRules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error) {
	out := new(RulesResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/DeleteRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) DeleteRule(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error) {
	out := new(RulesResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) Disconnect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterWatchServiceClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (TwitterWatchService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TwitterWatchService_ServiceDesc.Streams[0], "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &twitterWatchServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TwitterWatchService_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type twitterWatchServiceStreamClient struct {
	grpc.ClientStream
}

func (x *twitterWatchServiceStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwitterWatchServiceServer is the server API for TwitterWatchService service.
// All implementations should embed UnimplementedTwitterWatchServiceServer
// for forward compatibility
type TwitterWatchServiceServer interface {
	// Autorize implements twitter's oauth2 authorization
	// read more: https://developer.twitter.com/en/docs/authentication/oauth-2-0
	Authorize(context.Context, *AuthorizeRequest) (*AuthResponse, error)
	// Obb implements twitter's pin-based oath 1.0a authorization
	// read more: https://developer.twitter.com/en/docs/authentication/oauth-1-0a/pin-based-oauth
	Obb(context.Context, *Empty) (*ObbResponse, error)
	// Verify twitter's authorization
	Verify(context.Context, *VerifyRequest) (*AuthResponse, error)
	// Addrules adds a new rule to twitter streaming api
	AddRules(context.Context, *RulesRequest) (*RulesResponse, error)
	// GetRules returns all rules stored on twitter streaming api
	GetRules(context.Context, *RulesRequest) (*RulesResponse, error)
	// GetRule by id, specific to user id
	GetRule(context.Context, *RulesRequest) (*RulesResponse, error)
	// DeleteRules deletes all rules
	DeleteRules(context.Context, *RulesRequest) (*RulesResponse, error)
	// DeleteRule deletes a specific rule
	DeleteRule(context.Context, *RulesRequest) (*RulesResponse, error)
	// Connect establish a connection with the service
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnect establish a connection with the service
	Disconnect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Stream data from twitter api
	Stream(*StreamRequest, TwitterWatchService_StreamServer) error
}

// UnimplementedTwitterWatchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTwitterWatchServiceServer struct {
}

func (UnimplementedTwitterWatchServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedTwitterWatchServiceServer) Obb(context.Context, *Empty) (*ObbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Obb not implemented")
}
func (UnimplementedTwitterWatchServiceServer) Verify(context.Context, *VerifyRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedTwitterWatchServiceServer) AddRules(context.Context, *RulesRequest) (*RulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRules not implemented")
}
func (UnimplementedTwitterWatchServiceServer) GetRules(context.Context, *RulesRequest) (*RulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRules not implemented")
}
func (UnimplementedTwitterWatchServiceServer) GetRule(context.Context, *RulesRequest) (*RulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedTwitterWatchServiceServer) DeleteRules(context.Context, *RulesRequest) (*RulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRules not implemented")
}
func (UnimplementedTwitterWatchServiceServer) DeleteRule(context.Context, *RulesRequest) (*RulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedTwitterWatchServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedTwitterWatchServiceServer) Disconnect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedTwitterWatchServiceServer) Stream(*StreamRequest, TwitterWatchService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

// UnsafeTwitterWatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitterWatchServiceServer will
// result in compilation errors.
type UnsafeTwitterWatchServiceServer interface {
	mustEmbedUnimplementedTwitterWatchServiceServer()
}

func RegisterTwitterWatchServiceServer(s grpc.ServiceRegistrar, srv TwitterWatchServiceServer) {
	s.RegisterService(&TwitterWatchService_ServiceDesc, srv)
}

func _TwitterWatchService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_Obb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).Obb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Obb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).Obb(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_AddRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).AddRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/AddRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).AddRules(ctx, req.(*RulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_GetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).GetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/GetRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).GetRules(ctx, req.(*RulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/GetRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).GetRule(ctx, req.(*RulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_DeleteRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).DeleteRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/DeleteRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).DeleteRules(ctx, req.(*RulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).DeleteRule(ctx, req.(*RulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterWatchServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rtaa.streamer.twitter.v1.TwitterWatchService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterWatchServiceServer).Disconnect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterWatchService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitterWatchServiceServer).Stream(m, &twitterWatchServiceStreamServer{stream})
}

type TwitterWatchService_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type twitterWatchServiceStreamServer struct {
	grpc.ServerStream
}

func (x *twitterWatchServiceStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TwitterWatchService_ServiceDesc is the grpc.ServiceDesc for TwitterWatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitterWatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rtaa.streamer.twitter.v1.TwitterWatchService",
	HandlerType: (*TwitterWatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _TwitterWatchService_Authorize_Handler,
		},
		{
			MethodName: "Obb",
			Handler:    _TwitterWatchService_Obb_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _TwitterWatchService_Verify_Handler,
		},
		{
			MethodName: "AddRules",
			Handler:    _TwitterWatchService_AddRules_Handler,
		},
		{
			MethodName: "GetRules",
			Handler:    _TwitterWatchService_GetRules_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _TwitterWatchService_GetRule_Handler,
		},
		{
			MethodName: "DeleteRules",
			Handler:    _TwitterWatchService_DeleteRules_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _TwitterWatchService_DeleteRule_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _TwitterWatchService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _TwitterWatchService_Disconnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TwitterWatchService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rtaa/streamer/twitter/v1/twitterwatch.proto",
}
